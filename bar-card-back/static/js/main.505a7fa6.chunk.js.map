{"version":3,"sources":["../node_modules/jspdf/dist sync","components/SignUp.js","components/SignIn.js","components/TableAddons.js","components/TableOptions.js","components/TableHistory.js","components/BarSwitch.js","components/Table.js","components/OptionContainer.js","components/AdminOptions.js","components/TableAdmin.js","components/TableContainer.js","MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","SignUp","props","handleOnChange","bind","handleSubmit","state","values","login","email","password1","password2","name","surname","errors","rules","v","search","length","password1Input","value","this","setState","prevState","map","err","filter","className","Object","every","fetch","method","headers","body","JSON","stringify","then","data","json","alert","message","handleReg","event","target","handleVerify","Container","Col","Form","Row","Group","as","controlId","Label","Control","isInvalid","onChange","type","placeholder","Feedback","ref","input","Button","variant","color","onClick","Component","SignIn","reg","password","success","updateAuth","error","Image","src","width","passwordInput","tableIcons","Add","forwardRef","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","localization","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","filterRow","filterTooltip","editRow","deleteText","cancelTooltip","saveTooltip","grouping","groupedBy","header","actions","pagination","labelDisplayedRows","labelRowsSelect","labelRowsPerPage","firstAriaLabel","firstTooltip","previousAriaLabel","previousTooltip","nextAriaLabel","nextTooltip","lastAriaLabel","lastTooltip","toolbar","addRemoveColumns","nRowsSelected","showColumnsTitle","showColumnsAriaLabel","exportTitle","exportAriaLabel","exportName","searchTooltip","searchPlaceholder","TableOptions","React","useState","status","rowData","comment","comment_status","note","checkedReturn","handleChange","cardAction","amount","return","updateTable","TextField","label","InputLabelProps","shrink","size","FormControlLabel","control","Checkbox","checked","multiline","FormControl","InputLabel","Select","labelId","MenuItem","UserTable","table","isLoading","updateHistory","console","log","columns","style","boxShadow","animation","icons","title","field","options","pageSize","pageSizeOptions","searchFieldAlignment","actionsColumnIndex","exportButton","BarSwitch","Switch","admin","borderRadius","height","render","fontWeight","initialEditValue","minWidth","detailPanel","tooltip","icon","HistoryIcon","editable","onRowAdd","newData","Promise","editTable","onRowUpdate","prevData","onRowDelete","searchFieldVariant","isFreeAction","OptionContainer","open","setOpen","save","handleClose","blob","Blob","saveAs","href","updateUsers","Tooltip","user","placement","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","accept","DialogActions","document","getElementById","formData","FormData","append","files","AdminOptions","TableAdmin","marginTop","editUsers","UserTableContainer","users","uisLoading","uShow","contentSwitch","content","task","MainContainer","auth","loaded","LinearProgress","App","palette","primary","main","secondary","theme","muiTheme","createMuiTheme","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"6FAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,wRCHJC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQ,CACTC,OAAO,CACHC,MAAM,GACNC,MAAM,GACNC,UAAU,GACVC,UAAU,GACVC,KAAK,GACLC,QAAQ,IAEZC,OAAO,CACHN,OAAM,EACNC,OAAM,EACNC,WAAU,EACVC,WAAU,EACVC,MAAK,EACLC,SAAQ,GAEZE,MAAM,CACFN,MAAM,CAAC,SAAAO,GAAC,OAA4F,IAAxFA,EAAEC,OAAO,2EAAoF,0HACzGT,MAAM,CACF,SAAAQ,GAAC,QAAMA,GAAK,8EACZ,SAAAA,GAAC,OAAIA,EAAEE,OAAS,GAAK,+LACrB,SAAAF,GAAC,OAAsC,IAAlCA,EAAEC,OAAO,qBAA8B,yNAC5C,SAAAD,GAAC,OAA+B,IAA3BA,EAAEC,OAAO,cAAuB,qOAEzCP,UAAU,CACN,SAAAM,GAAC,QAAMA,GAAK,oFACZ,SAAAA,GAAC,OAAIA,EAAEE,OAAS,GAAK,qMACrB,SAAAF,GAAC,OAAkC,IAA9BA,EAAEC,OAAO,iBAA0B,mOACxC,SAAAD,GAAC,OAAkC,IAA9BA,EAAEC,OAAO,iBAA0B,uXACxC,SAAAD,GAAC,OAA0C,IAAtCA,EAAEC,OAAO,yBAAkC,uLACpDN,UAAU,CACN,SAAAK,GAAC,QAAMA,GAAK,oFACZ,SAAAA,GAAC,OAAIA,IAAM,EAAKG,eAAeC,OAAS,8GAC5CR,KAAK,CACD,SAAAI,GAAC,QAAMA,GAAK,kEACZ,SAAAA,GAAC,OAAuC,IAAnCA,EAAEC,OAAO,0CAA+B,mOACjDJ,QAAQ,CACJ,SAAAG,GAAC,OAAuC,IAAnCA,EAAEC,OAAO,0CAA+B,0PAC7C,SAAAD,GAAC,QAAMA,GAAK,6FA3CT,E,yDAiDNJ,EAAMQ,GACfC,KAAKC,UAAS,SAAAC,GACV,IAAMT,EAASS,EAAUR,MAAMH,GAAMY,KAAI,SAAA/B,GACrC,IAAIgC,EAAMhC,EAAE2B,GACZ,OAAe,IAARK,EAAeA,EAAM,QAE3BC,QAAO,SAAUjC,GACd,OAAa,OAANA,KAEV+B,KAAI,SAAA/B,GAAC,OAAI,uBAAGkC,UAAU,WAAWlC,MAEtC,OADA8B,EAAUT,OAAOF,GAA0B,IAAlBE,EAAOI,QAAuBJ,EAChDS,O,qCAIC,IAAD,OACPK,OAAOrB,OAAOc,KAAKf,MAAMQ,QAAQe,OAAM,SAAApC,GAAC,OAAKA,KAC7CqC,MAAM,WAAY,CACdC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAL,eACEd,KAAKf,MAAMC,WAGjB6B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFE,MAAMF,EAAKG,SACX,EAAKtC,MAAMuC,eAGnBF,MAAM,6I,qCAICG,GACX,IAAM9B,EAAO8B,EAAMC,OAAO/B,KACpBQ,EAAQsB,EAAMC,OAAOvB,MAC3BC,KAAKC,UAAS,SAAAC,GAEV,OADAA,EAAUhB,OAAOK,GAAQQ,EAClBG,KAEXF,KAAKuB,aAAahC,EAAMQ,K,+BAIlB,IAAD,OACL,OACI,kBAACyB,EAAA,EAAD,CAAWlB,UAAU,wBACjB,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,4BACjB,uBAAGA,UAAU,uBAAb,sEAGA,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIJ,IAAKK,UAAU,eAAexB,UAAU,mBACpD,kBAACoB,EAAA,EAAKK,MAAN,2BACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAOF,KAC/BA,KAAM,OACNQ,MAAOC,KAAKf,MAAMC,OAAOK,KACzB2C,SAAUlC,KAAKlB,eACfqD,KAAK,OACLC,YAAY,qGACZ9B,UAAU,oBAEd,kBAACoB,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAOF,OAI3B,kBAACmC,EAAA,EAAKE,MAAN,CAAYC,GAAIJ,IAAKK,UAAU,kBAAkBxB,UAAU,mBACvD,kBAACoB,EAAA,EAAKK,MAAN,mDACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAOD,QAC/BD,KAAM,UACNQ,MAAOC,KAAKf,MAAMC,OAAOM,QACzB0C,SAAUlC,KAAKlB,eACfqD,KAAK,OACLC,YAAY,wFACZ9B,UAAU,oBAEd,kBAACoB,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAOD,WAI/B,kBAACkC,EAAA,EAAKC,IAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIJ,IAAKK,UAAU,gBAAgBxB,UAAU,mBACrD,kBAACoB,EAAA,EAAKK,MAAN,uCACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAON,MAC/BI,KAAM,QACNQ,MAAOC,KAAKf,MAAMC,OAAOC,MACzB+C,SAAUlC,KAAKlB,eACfqD,KAAK,OACLC,YAAY,4EACZ9B,UAAU,oBAEd,kBAACoB,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAON,QAI3B,kBAACuC,EAAA,EAAKE,MAAN,CAAYC,GAAIJ,IAAKK,UAAU,gBAAgBxB,UAAU,mBACrD,kBAACoB,EAAA,EAAKK,MAAN,uCACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAOL,MAC/BG,KAAM,QACNQ,MAAOC,KAAKf,MAAMC,OAAOE,MACzB8C,SAAUlC,KAAKlB,eACfqD,KAAK,QACLC,YAAY,4EACZ9B,UAAU,oBAEd,kBAACoB,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAOL,SAI/B,kBAACsC,EAAA,EAAKC,IAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIJ,IAAKK,UAAU,oBAAoBxB,UAAU,mBACzD,kBAACoB,EAAA,EAAKK,MAAN,6CACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAOJ,UAC/BE,KAAM,YACNQ,MAAOC,KAAKf,MAAMC,OAAOG,UACzB6C,SAAUlC,KAAKlB,eACfqD,KAAK,WACLC,YAAY,kFACZ9B,UAAU,kBACVgC,IAAK,SAACC,GAAD,OAAW,EAAKzC,eAAiByC,KAE1C,kBAACb,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAOJ,YAI3B,kBAACqC,EAAA,EAAKE,MAAN,CAAYC,GAAIJ,IAAKK,UAAU,oBAAoBxB,UAAU,mBACzD,kBAACoB,EAAA,EAAKK,MAAN,oGACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAOH,UAC/BC,KAAM,YACNQ,MAAOC,KAAKf,MAAMC,OAAOI,UACzB4C,SAAUlC,KAAKlB,eACfqD,KAAK,WACLC,YAAY,8FACZ9B,UAAU,oBAEd,kBAACoB,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAOH,aAK/B,kBAACkD,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,UACNC,QAAS3C,KAAKhB,aACdsB,UAAU,wBAJd,wH,GA/MQsC,aCEfC,E,kDACjB,WAAYhE,GAAQ,IAAD,8BACf,cAAMA,IACD0C,aAAe,EAAKA,aAAaxC,KAAlB,gBACpB,EAAKD,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKqC,UAAY,EAAKA,UAAUrC,KAAf,gBACjB,EAAKE,MAAQ,CACT6D,KAAI,EACJ5D,OAAO,CACHC,MAAM,GACN4D,SAAS,IAEbtD,OAAO,CACHN,OAAM,EACN4D,UAAS,GAGbrD,MAAM,CACFP,MAAM,CACF,SAAAQ,GAAC,QAAMA,GAAK,+EAEhBoD,SAAS,CACL,SAAApD,GAAC,QAAMA,GAAK,uFAtBT,E,2DA6BJ0B,GACX,IAAM9B,EAAO8B,EAAMC,OAAO/B,KACpBQ,EAAQsB,EAAMC,OAAOvB,MAC3BC,KAAKC,UAAS,SAAAC,GAEV,OADAA,EAAUhB,OAAOK,GAAQQ,EAClBG,KAEXF,KAAKuB,aAAahC,EAAMQ,K,qCAGZ,IAAD,OACXU,MAAM,WAAY,CACdC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAUd,KAAKf,MAAMC,UAE9B6B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACEA,EAAKgC,QACL,EAAKnE,MAAMoE,aAEX/B,MAAMF,EAAKkC,Y,mCAKd3D,EAAMQ,GACfC,KAAKC,UAAS,SAAAC,GACV,IAAMT,EAASS,EAAUR,MAAMH,GAAMY,KAAI,SAAA/B,GACrC,IAAIgC,EAAMhC,EAAE2B,GACZ,OAAe,IAARK,EAAeA,EAAM,QAE3BC,QAAO,SAAUjC,GACd,OAAa,OAANA,KAEV+B,KAAI,SAAA/B,GAAC,OAAI,uBAAGkC,UAAU,WAAWlC,MAEtC,OADA8B,EAAUT,OAAOF,GAA0B,IAAlBE,EAAOI,QAAuBJ,EAChDS,O,kCAKXF,KAAKC,SAAS,CACV6C,KAAwB,IAAnB9C,KAAKf,MAAM6D,Q,+BAId,IAAD,OACL,OACI,oCACI,kBAACtB,EAAA,EAAD,CAAWlB,UAAU,UACjB,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,uBACjB,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,4BACjB,uBAAGA,UAAU,uBACT,kBAAC6C,EAAA,EAAD,CAAOC,IAAI,kBAAkBC,MAAM,OADvC,wEAIA,kBAAC5B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKE,MAAN,CAAYE,UAAU,kBAClB,kBAACJ,EAAA,EAAKK,MAAN,uCACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAON,MAC/BI,KAAM,QACNQ,MAAOC,KAAKf,MAAMC,OAAOC,MACzB+C,SAAUlC,KAAKlB,eACfqD,KAAK,OACLC,YAAY,4EACZ9B,UAAU,oBAEd,kBAACoB,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAON,QAG3B,kBAACuC,EAAA,EAAKE,MAAN,CAAYE,UAAU,qBAClB,kBAACJ,EAAA,EAAKK,MAAN,6CACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,YAAajC,KAAKf,MAAMQ,OAAOsD,SAC/BxD,KAAM,WACNQ,MAAOC,KAAKf,MAAMC,OAAO6D,SACzBb,SAAUlC,KAAKlB,eACfqD,KAAK,WACLC,YAAY,kFACZ9B,UAAU,kBACVgC,IAAK,SAACC,GAAD,OAAW,EAAKe,cAAgBf,KAEzC,kBAACb,EAAA,EAAKM,QAAQK,SAAd,CAAuBF,KAAK,WACvBnC,KAAKf,MAAMQ,OAAOsD,WAG3B,kBAACP,EAAA,EAAD,CAAQE,MAAM,UAAUD,QAAQ,YAAYnC,UAAU,YAC9CqC,QAAS3C,KAAKhB,cADtB,kCAIA,kBAACwD,EAAA,EAAD,CAAQC,QAAQ,YAAYnC,UAAU,YAAYqC,QAAS3C,KAAKoB,WAAhE,2EAQnBpB,KAAKf,MAAM6D,KACZ,kBAACtB,EAAA,EAAD,CAAWlB,UAAU,UACjB,kBAAC,EAAD,CAAQc,UAAWpB,KAAKoB,kB,GAxIRwB,a,iSCYvBW,GAAa,CACtBC,IAAIC,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAYzD,EAAZ,CAAmByD,IAAKA,QACvDoB,MAAMD,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAWzD,EAAX,CAAkByD,IAAKA,QACxDqB,MAAMF,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAWzD,EAAX,CAAkByD,IAAKA,QACxDsB,OAAOH,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAmBzD,EAAnB,CAA0ByD,IAAKA,QACjEuB,YAAYJ,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAkBzD,EAAlB,CAAyByD,IAAKA,QACrEwB,KAAKL,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAUzD,EAAV,CAAiByD,IAAKA,QACtDyB,OAAON,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAazD,EAAb,CAAoByD,IAAKA,QAC3D0B,OAAOP,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAgBzD,EAAhB,CAAuByD,IAAKA,QAC9D2B,UAAUR,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAezD,EAAf,CAAsByD,IAAKA,QAChE4B,SAAST,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAczD,EAAd,CAAqByD,IAAKA,QAC9D6B,SAASV,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAkBzD,EAAlB,CAAyByD,IAAKA,QAClE8B,aAAaX,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAiBzD,EAAjB,CAAwByD,IAAKA,QACrE+B,YAAYZ,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAWzD,EAAX,CAAkByD,IAAKA,QAC9DgC,OAAOb,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAYzD,EAAZ,CAAmByD,IAAKA,QAC1DiC,UAAUd,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAmBzD,EAAnB,CAA0ByD,IAAKA,QACpEkC,gBAAgBf,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,IAAD,iBAAYzD,EAAZ,CAAmByD,IAAKA,QACnEmC,WAAWhB,sBAAW,SAAC5E,EAAOyD,GAAR,OAAgB,kBAAC,KAAD,iBAAgBzD,EAAhB,CAAuByD,IAAKA,SAIzDoC,GAAe,CACxB9D,KAAK,CACD+D,uBAAuB,0DACvBC,WAAW,mDACXC,cAAc,6CACdC,YAAY,mDACZC,UAAU,CACNC,cAAc,wCAElBC,QAAQ,CACJC,WAAW,oNACXC,cAAc,mDACdC,YAAY,uEAGpBC,SAAS,CACLjD,YAAY,oHACZkD,UAAU,0FAEdC,OAAO,CACHC,QAAQ,oDAEZC,WAAW,CACPC,mBAAmB,mCACnBC,gBAAgB,iCAChBC,iBAAiB,gGACjBC,eAAe,wFACfC,aAAa,wFACbC,kBAAkB,gHAClBC,gBAAgB,gHAChBC,cAAc,0GACdC,YAAY,0GACZC,cAAc,0GACdC,YAAY,2GAEhBC,QAAQ,CACJC,iBAAiB,yIACjBC,cAAc,gFACdC,iBAAiB,8FACjBC,qBAAqB,8FACrBC,YAAY,uFACZC,gBAAgB,uFAChBC,WAAW,8GACXC,cAAc,iCACdC,kBAAkB,mC,yFCxEX,SAASC,GAAalI,GAAQ,IAAD,EACdmI,IAAMC,SAAS,CACrCC,OAAOrI,EAAMsI,QAAQD,OACrBnH,MAAM,EACNqH,QAAQ,GACRC,eAAe,GACfC,KAAK,GACLC,eAAc,IAPsB,mBACjCtI,EADiC,KAC1BgB,EAD0B,KAclCuH,EAAe,SAACnG,GAClB,IAAM9B,EAAO8B,EAAMC,OAAO/B,KAC1BU,EAAS,2BACFhB,GADC,mBAEHM,EAAM8B,EAAMC,OAAOvB,UAItB0H,EAAa,SAACpG,EAAO1C,GACvB8B,MAAM,eAAgB,CAClBC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAU,CAChBO,MAAMA,EACNqG,OAAOzI,EAAMc,MACbqH,QAAQnI,EAAMmI,QACdO,OAAO1I,EAAMsI,cACb5I,GAAGA,MAGNoC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACEA,EAAKgC,QACLnE,EAAM+I,cAEN1G,MAAMF,EAAKkC,WAgD3B,OACI,kBAAC1B,EAAA,EAAD,CAAWlB,UAAU,mBACjB,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,kBACjB,kBAACqB,GAAA,EAAD,KACI,kBAACF,EAAA,EAAD,CAAKnB,UAAU,gCACX,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,4BACjB,kBAACqB,GAAA,EAAD,KACI,yBAAKrB,UAAU,eAAf,uGAEJ,kBAACqB,GAAA,EAAD,CAAKrB,UAAU,OACX,kBAACmB,EAAA,EAAD,CAAKnB,UAAU,iBACX,kBAACqB,GAAA,EAAD,CAAKrB,UAAU,aACX,kBAACuH,GAAA,EAAD,CACIlJ,GAAG,kBACHmJ,MAAM,iCACN3F,KAAK,SACL5C,KAAK,QACLQ,MAAOd,EAAMc,MACbmC,SAAUsF,EACVO,gBAAiB,CACbC,QAAO,GAEXvF,QAAQ,WACRwF,KAAK,WAGb,kBAACtG,GAAA,EAAD,CAAKrB,UAAU,QACX,kBAAC4H,GAAA,EAAD,CACIC,QACI,kBAACC,GAAA,EAAD,CACIC,QAASpJ,EAAMsI,cACfrF,SA9G5B,SAACb,GACjBpB,EAAS,2BAAKhB,GAAN,mBAAcoC,EAAMC,OAAO/B,KAAO8B,EAAMC,OAAO+G,YA8GX9I,KAAK,gBACLmD,MAAM,YAGdoF,MAAM,mIAIlB,kBAACrG,EAAA,EAAD,CAAKnB,UAAU,YACX,kBAACqB,GAAA,EAAD,CAAKrB,UAAU,QACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYnD,KAAK,OAC3Ce,UAAU,SACVqC,QAAS,kBAAM8E,EAAW,OAAQ5I,EAAMsI,QAAQxI,MAFxD,yEAMJ,kBAACgD,GAAA,EAAD,KACI,kBAACa,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAC1BpC,UAAU,SACVqC,QAAS,kBAAM8E,EAAW,MAAO5I,EAAMsI,QAAQxI,MAFvD,6DAQZ,kBAACgD,GAAA,EAAD,CAAKrB,UAAU,OACX,kBAACmB,EAAA,EAAD,CAAKnB,UAAU,oCACX,kBAACuH,GAAA,EAAD,CACIvH,UAAU,SACV3B,GAAG,UACHmJ,MAAM,qEACNrF,QAAQ,WACRlD,KAAK,UACLQ,MAAOd,EAAMmI,QACblF,SAAUsF,EACVS,KAAK,QACLK,WAAW,QAM/B,kBAAC7G,EAAA,EAAD,CAAKnB,UAAU,gCACX,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,4BACjB,kBAACqB,GAAA,EAAD,KACI,yBAAKrB,UAAU,eAAf,mHAEJ,kBAACqB,GAAA,EAAD,CAAKrB,UAAU,OACX,kBAACmB,EAAA,EAAD,CAAKnB,UAAU,SACX,kBAACiI,GAAA,EAAD,CAAa9F,QAAQ,WAAWwF,KAAK,QAAQ3H,UAAU,eACnD,kBAACkI,GAAA,EAAD,CAAY7J,GAAG,gBAAf,wCACA,kBAAC8J,GAAA,EAAD,CACInI,UAAU,OACVP,MAAOd,EAAMiI,OACbhF,SAAUsF,EACVkB,QAAQ,SACRnJ,KAAK,SACLZ,GAAG,SACHmJ,MAAM,wCAEN,kBAACa,GAAA,EAAD,CAAU5I,MAAO,mCAAjB,mCACA,kBAAC4I,GAAA,EAAD,CAAU5I,MAAO,kCAAjB,kCACA,kBAAC4I,GAAA,EAAD,CAAU5I,MAAO,2GAAjB,6GAGR,kBAAC8H,GAAA,EAAD,CACIvH,UAAU,SACV3B,GAAG,iBACHY,KAAK,iBACLQ,MAAOd,EAAMoI,eACbnF,SAAUsF,EACVM,MAAM,qEACNrF,QAAQ,WACRwF,KAAK,QACLK,WAAW,KAInB,kBAAC7G,EAAA,EAAD,CAAKnB,UAAU,6BACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,YACRE,QAAS,kBA3J3BhE,EA2J8CE,EAAMsI,QAAQxI,QA1J9E8B,MAAM,iBAAkB,CACpBC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAU,CAChBoG,OAAOjI,EAAMiI,OACbE,QAAQnI,EAAMoI,eACd1I,GAAGA,MAGNoC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACEA,EAAKgC,QACLnE,EAAM+I,cAEN1G,MAAMF,EAAKkC,UAjBN,IAACvE,IA0JU,8DAQhB,kBAAC8C,EAAA,EAAD,CAAKnB,UAAU,6BACX,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,4BACjB,kBAACqB,GAAA,EAAD,KACI,yBAAKrB,UAAU,eAAf,oFAEJ,kBAACqB,GAAA,EAAD,CAAKrB,UAAU,iBACX,kBAACuH,GAAA,EAAD,CACIvH,UAAU,cACV3B,GAAG,iBACHY,KAAK,OACLQ,MAAOd,EAAMqI,KACbpF,SAAUsF,EACVM,MAAM,+DACNrF,QAAQ,WACRwF,KAAK,QACLK,WAAW,KAGnB,kBAAC3G,GAAA,EAAD,CAAKrB,UAAU,4CACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,YACRE,QAAS,kBAhKzBhE,EAgK0CE,EAAMsI,QAAQxI,QA/JxE8B,MAAM,eAAgB,CAClBC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAU,CAChBwG,KAAKrI,EAAMqI,KACX3I,GAAGA,MAGNoC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACEA,EAAKgC,QACLnE,EAAM+I,cAEN1G,MAAMF,EAAKkC,UAhBR,IAACvE,IA+JQ,gE,ICzOXiK,G,kDACjB,WAAY/J,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT4J,MAAM,GACNC,WAAU,GAEd,EAAKC,cAAgB,EAAKA,cAAchK,KAAnB,gBANN,E,4DASF,IAAD,OACZiB,KAAKC,SAAS,CAAC6I,WAAU,IACzBrI,MAAM,cAAe,CACjBC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAU,CAChBnC,GAAGqB,KAAKnB,MAAMF,OAGjBoC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFgI,QAAQC,IAAIjI,GACZ,EAAKf,SAAS,CAAC6I,WAAU,IACrB9H,EAAKgC,SACL,EAAK/C,SAAS,CAAC4I,MAAM,CAACK,QAAQlI,EAAK6H,MAAMK,QAASlI,KAAKA,EAAK6H,MAAM7H,a,0CAQ9EhB,KAAK+I,kB,+BAIL,OACI,kBAACvH,EAAA,EAAD,CAAWlB,UAAU,cACjB,kBAAC,IAAD,CACI6I,MAAO,CACHC,UAAU,cACVC,UAAU,cAEdP,UAAW9I,KAAKnB,MAAMiK,UACtBQ,MAAO/F,GACPmB,aAAcA,GACd6E,MACI,yBAAKjJ,UAAU,6BAAf,gGAIJ4I,QAAS,CACL,CAACK,MAAM,2BAAQC,MAAM,YACrB,CAACD,MAAM,mDAAYC,MAAM,eACzB,CAACD,MAAM,mDAAYC,MAAM,SACzB,CAACD,MAAM,qEAAeC,MAAM,WAC5B,CAACD,MAAM,2EAAgBC,MAAM,QAC7B,CAACD,MAAM,iCAASC,MAAM,UAE1BxI,KAAMhB,KAAKf,MAAM4J,MAAM7H,KACvByI,QAAS,CACLC,SAAS,EACTC,gBAAgB,CAAC,EAAG,GAAI,GAAI,IAC5BC,qBAAqB,OACrBC,oBAAoB,EACpBC,cAAa,U,GAnEElH,a,+BCDxB,SAASmH,KACpB,OACI,kBAAC7B,GAAA,EAAD,CACIC,QACI,kBAAC6B,GAAA,EAAD,CACIzK,KAAK,QACLZ,GAAG,QACH+D,MAAM,YAGdoF,MAAM,yE,ICLGc,G,kDAEjB,WAAY/J,GAAQ,uCACVA,G,qDAGA,IAAD,OACL,OACI,oCAEQmB,KAAKnB,MAAMoL,MACP,kBAAC,IAAD,CACId,MAAO,CACHe,aAAa,GACbd,UAAU,iCACVC,UAAU,cAEdP,UAAW9I,KAAKnB,MAAMiK,UACtBQ,MAAO/F,GACPmB,aAAcA,GACd6E,MACI,yBAAKjJ,UAAU,sBACX,kBAAC6C,EAAA,EAAD,CAAOC,IAAI,kBAAkB+G,OAAO,QAG5CjB,QAAS,CACL,CAACK,MAAM,qBAAOC,MAAM,QACpB,CAACD,MAAM,6CAAWC,MAAM,WACxB,CAACD,MAAM,mDAAYC,MAAM,gBACzB,CAACD,MAAM,gEAAeC,MAAM,eAC5B,CACID,MAAM,uCAAUC,MAAM,UAAWrH,KAAK,UAAWiI,OAAO,SAAAjD,GAAO,OAC1D,yBAAKgC,MAAO,CAACkB,WAAW,SAAxB,KAAoClD,EAAO,QAA3C,QAET,CACIoC,MAAM,uCAAUC,MAAM,SAAUc,iBAAiB,kCAAUF,OAAO,SAAAjD,GAAO,OACpE,yBAAKgC,MAAO,CAACoB,SAAS,UAAtB,KAAmCpD,EAAO,OAA1C,QAET,CACIoC,MAAM,+DAAcC,MAAM,OAAQY,OAAO,SAAAjD,GAAO,OAC3C,yBAAKgC,MAAO,CAACoB,SAAS,UAAtB,KAAmCpD,EAAO,KAA1C,SAGbnG,KAAMhB,KAAKnB,MAAMmC,KACjBwJ,YAAa,CACT,CACIC,QAAQ,iCACRL,OAAO,SAAAjD,GACH,OACI,kBAACJ,GAAD,CACII,QAASA,EACTS,YAAa,EAAK/I,MAAM+I,gBAKxC,CACI8C,KAAKC,KACLF,QAAQ,6CACRL,OAAO,SAAAjD,GACH,OACI,kBAAC,GAAD,CACIxI,GAAIwI,EAAQxI,QAMhCiM,SAAU,CACNC,SAAS,SAACC,GAAD,OACL,IAAIC,SAAQ,SAACvM,GACTA,IACA,EAAKK,MAAMmM,UAAU,aAAcF,OAE3CG,YAAY,SAACH,EAASI,GAAV,OACR,IAAIH,SAAQ,SAACvM,GACTA,IACA,EAAKK,MAAMmM,UAAU,cAAeF,OAE5CK,YAAY,SAACL,GAAD,OACR,IAAIC,SAAQ,SAACvM,GACTA,IACA,EAAKK,MAAMmM,UAAU,gBAAiBF,QAGlDrB,QAAS,CACLC,SAAS,GACTC,gBAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,KACjCC,qBAAqB,OACrBC,oBAAoB,EACpBC,cAAa,EACbsB,mBAAmB,YAEvB5F,QAAS,CACL,CACIkF,KAAKX,GACLU,QAAQ,uEACRY,cAAa,EACb1I,QAAQ3C,KAAKnB,MAAM+I,gBAK/B,kBAAC,IAAD,CACIuB,MAAO,CACHe,aAAa,GACbd,UAAU,iCACVC,UAAU,cAEdP,UAAW9I,KAAKnB,MAAMiK,UACtBQ,MAAO/F,GACPmB,aAAcA,GACd6E,MACI,yBAAKjJ,UAAU,sBACX,kBAAC6C,EAAA,EAAD,CAAOC,IAAI,kBAAkB+G,OAAO,QAG5CjB,QAAS,CACL,CAACK,MAAM,qBAAOC,MAAM,QACpB,CAACD,MAAM,6CAAWC,MAAM,WACxB,CAACD,MAAM,mDAAYC,MAAM,gBACzB,CAACD,MAAM,gEAAeC,MAAM,eAC5B,CACID,MAAM,uCAAUC,MAAM,UAAWrH,KAAK,UAAWiI,OAAO,SAAAjD,GAAO,OAC1D,yBAAKgC,MAAO,CAACkB,WAAW,SAAxB,KAAoClD,EAAO,QAA3C,QAET,CACIoC,MAAM,uCAAUC,MAAM,SAAUc,iBAAiB,kCAAUF,OAAO,SAAAjD,GAAO,OACpE,yBAAKgC,MAAO,CAACoB,SAAS,UAAtB,KAAmCpD,EAAO,OAA1C,QAET,CACIoC,MAAM,+DAAcC,MAAM,OAAQY,OAAO,SAAAjD,GAAO,OAC3C,yBAAKgC,MAAO,CAACoB,SAAS,UAAtB,KAAmCpD,EAAO,KAA1C,SAGbnG,KAAMhB,KAAKnB,MAAMmC,KACjBwJ,YAAa,CACT,CACIC,QAAQ,iCACRL,OAAO,SAAAjD,GACH,OACI,kBAACJ,GAAD,CACII,QAASA,EACTS,YAAa,EAAK/I,MAAM+I,gBAKxC,CACI8C,KAAKC,KACLF,QAAQ,6CACRL,OAAO,SAAAjD,GACH,OACI,kBAAC,GAAD,CACIxI,GAAIwI,EAAQxI,QAMhCiM,SAAU,CACNC,SAAS,SAACC,GAAD,OACL,IAAIC,SAAQ,SAACvM,GACTA,IACA,EAAKK,MAAMmM,UAAU,aAAcF,QAG/CrB,QAAS,CACLC,SAAS,GACTC,gBAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,KACjCC,qBAAqB,OACrBC,oBAAoB,EACpBC,cAAa,EACbsB,mBAAmB,YAEvB5F,QAAS,CACL,CACIkF,KAAKX,GACLU,QAAQ,uEACRY,cAAa,EACb1I,QAAQ3C,KAAKnB,MAAM+I,qB,GApLhBhF,a,sECIxB,SAAS0I,GAAgBzM,GAAQ,IAAD,EAEnBmI,IAAMC,UAAS,GAFI,mBAEpCsE,EAFoC,KAE9BC,EAF8B,OAGjBxE,IAAMC,SAAS,CACrCwE,MAAK,IAJkC,mBAGpCxM,EAHoC,KAG7BgB,EAH6B,KAerCyL,EAAc,WAChBF,GAAQ,IAsDZ,OACI,kBAAChK,EAAA,EAAD,CAAWlB,UAAU,+BACjB,kBAACqB,GAAA,EAAD,KACI,kBAACF,EAAA,EAAD,CAAKnB,UAAU,sCACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,WAAWE,QAvDpB,WACnBlC,MAAM,eAAgB,CAClBE,QAAQ,CACJ,eAAe,oCAGlBI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAE,GACF,IAAI0K,EAAO,IAAIC,KAAK,CAAC/K,KAAKC,UAAUG,EAAM,KAAM,IAAK,CAACkB,KAAK,cAC3D0J,kBAAOF,EAAM,yBA8CT,wEAEJ,kBAAClK,EAAA,EAAD,CAAKnB,UAAU,sCACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,WAAWE,QAlEnB,WACpB6I,GAAQ,KAiEI,mFAEJ,kBAAC/J,EAAA,EAAD,CAAKnB,UAAU,sCACX,uBAAGwL,KAAK,yBAAyBxK,OAAO,UACpC,kBAACkB,EAAA,EAAD,CAAQC,QAAQ,YAAhB,0CAGR,kBAAChB,EAAA,EAAD,CAAKnB,UAAU,sCACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,YAAYC,QAjCvC,WAClBlC,MAAM,YAAa,CACfC,OAAO,OACPC,QAAQ,CACJ,eAAe,oCAGlBI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACEA,EAAKgC,QACLnE,EAAMoE,aAEN/B,MAAMF,EAAKkC,YAqBX,mCAEHrE,EAAMoL,OACH,kBAACxI,EAAA,EAAD,CAAKnB,UAAU,sCACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAUC,QAAS9D,EAAMkN,aAA1D,2GAIR,kBAACtK,EAAA,EAAD,CAAKnB,UAAU,iDACX,kBAAC0L,GAAA,EAAD,CAASzC,MAAO,iCAAO1K,EAAMoN,KAAK7M,MAAlB,KAAiC8M,UAAU,OACvD,yGACwB,2BAAIrN,EAAMoN,KAAK1M,KAAf,IAAsBV,EAAMoN,KAAKzM,aAOrE,kBAAC2M,GAAA,EAAD,CAAQZ,KAAMA,EAAMa,QAASV,EAAaW,kBAAgB,qBACtD,kBAACC,GAAA,EAAD,CAAa3N,GAAG,qBAAhB,6EACA,kBAAC4N,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,4MACwC,0GADxC,sWAIA,2BAAOrK,KAAK,OAAOxD,GAAG,YAAY2B,UAAU,OAAOmM,OAAO,UAC1D,kBAACvE,GAAA,EAAD,CACIC,QACI,kBAAC6B,GAAA,EAAD,CACI3B,QAASpJ,EAAMwM,KACfvJ,SA5GP,SAACb,GAClBpB,EAAS,2BAAIhB,GAAL,mBAAaoC,EAAMC,OAAO/B,KAAM8B,EAAMC,OAAO+G,YA4G7B9I,KAAK,OACLmD,MAAM,YAGdoF,MAAM,4IAGd,kBAAC4E,GAAA,EAAD,KACI,kBAAClK,EAAA,EAAD,CAAQG,QAAS+I,EAAahJ,MAAM,WAApC,wCAGA,kBAACF,EAAA,EAAD,CAAQG,QA/FH,WACjB,IAAMJ,EAAQoK,SAASC,eAAe,aAChCC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQxK,EAAMyK,MAAM,IACpCH,EAASE,OAAO,OAAQ9N,EAAMwM,MAC9BhL,MAAM,aAAc,CAChBC,OAAO,OACPE,KAAKiM,IAEJ9L,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACEA,EAAKgC,SACLnE,EAAM+I,cACN8D,KAEAxK,MAAMF,EAAKkC,WAgFoBR,MAAM,WAArC,2CCnIL,SAASuK,GAAapO,GAAQ,IAAD,EACdmI,IAAMC,SAAS,CACrCC,OAAOrI,EAAMsI,QAAQ8C,QAFe,mBACjChL,EADiC,KAC1BgB,EAD0B,KAkCxC,OACI,kBAACuB,EAAA,EAAD,CAAWlB,UAAU,mBACjB,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,kBACjB,kBAACqB,GAAA,EAAD,KACI,kBAACF,EAAA,EAAD,CAAKnB,UAAU,gCACX,kBAACkB,EAAA,EAAD,CAAWlB,UAAU,4BACjB,kBAACqB,GAAA,EAAD,KACI,yBAAKrB,UAAU,eAAf,8EAEJ,kBAACqB,GAAA,EAAD,CAAKrB,UAAU,OACX,kBAACmB,EAAA,EAAD,CAAKnB,UAAU,sCACX,kBAACiI,GAAA,EAAD,CAAa9F,QAAQ,WAAWwF,KAAK,QAAQ3H,UAAU,eACnD,kBAACkI,GAAA,EAAD,CAAY7J,GAAG,gBAAf,wCACA,kBAAC8J,GAAA,EAAD,CACInI,UAAU,OACVP,MAAOd,EAAMiI,OACbhF,SA7CnB,SAACb,GAClB,IAAM9B,EAAO8B,EAAMC,OAAO/B,KAC1BU,EAAS,2BACFhB,GADC,mBAEHM,EAAM8B,EAAMC,OAAOvB,UA0CY2I,QAAQ,SACRnJ,KAAK,SACLZ,GAAG,SACHmJ,MAAM,wCAEN,kBAACa,GAAA,EAAD,CAAU5I,MAAO,gBAAjB,gBACA,kBAAC4I,GAAA,EAAD,CAAU5I,MAAO,sBAAjB,yBAIZ,kBAAC0B,EAAA,EAAD,CAAKnB,UAAU,sCACX,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,YACRE,QAAS,kBAlD3BhE,EAkD8CE,EAAMsI,QAAQxI,QAjD9E8B,MAAM,gBAAiB,CACnBC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAU,CAChBoG,OAAOjI,EAAMiI,OACbvI,GAAGA,MAGNoC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACEA,EAAKgC,QACLnE,EAAMkN,cAEN7K,MAAMF,EAAKkC,UAhBN,IAACvE,IAiDU,iE,ICtDfuO,G,kDACjB,WAAYrO,GAAQ,uCACVA,G,qDAGA,IAAD,OACL,OACI,oCACI,kBAAC,IAAD,CACIsK,MAAO,CACHe,aAAa,GACbd,UAAU,iCACVC,UAAU,aACV8D,UAAU,QAEdrE,UAAW9I,KAAKnB,MAAMiK,UACtBQ,MAAO/F,GACPmB,aAAcA,GACd6E,MACI,yBAAKjJ,UAAU,6BAAf,yIAIJ4I,QAAS,CACL,CAACK,MAAM,qBAAOC,MAAM,QACpB,CAACD,MAAM,6CAAWC,MAAM,WACxB,CAACD,MAAM,QAASC,MAAM,SACtB,CAACD,MAAM,iCAASC,MAAM,SACtB,CAACD,MAAM,iFAAiBC,MAAM,UAElCoB,SAAU,CACNO,YAAY,SAACL,GAAD,OACR,IAAIC,SAAQ,SAACvM,GACTA,IACA,EAAKK,MAAMuO,UAAU,gBAAiBtC,QAGlDN,YAAa,CACT,CACIC,QAAQ,iCACRL,OAAO,SAAAjD,GACH,OACI,kBAAC8F,GAAD,CACIlB,YAAa,EAAKlN,MAAMkN,YACxB5E,QAASA,OAM7BnG,KAAMhB,KAAKnB,MAAMmC,KACjByI,QAAS,CACLC,SAAS,GACTC,gBAAgB,CAAC,GAAI,GAAI,IACzBC,qBAAqB,OACrBC,oBAAoB,EACpBC,cAAa,U,GAxDGlH,aCZnByK,G,kDACjB,WAAYxO,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT4J,MAAM,GACNC,WAAU,EACVwE,MAAM,GACNC,YAAW,EACXC,OAAO,GAEX,EAAKxC,UAAY,EAAKA,UAAUjM,KAAf,gBACjB,EAAKqO,UAAY,EAAKA,UAAUrO,KAAf,gBACjB,EAAK6I,YAAc,EAAKA,YAAY7I,KAAjB,gBACnB,EAAKgN,YAAc,EAAKA,YAAYhN,KAAjB,gBAZJ,E,0DAeJ,IAAD,OACViB,KAAKC,SAAS,CAAC6I,WAAU,IACzB,IAAM2E,EAAgBd,SAASC,eAAe,SAASvE,QACvD5H,MAAM,UAAW,CACbC,OAAQ,OACRC,QAAQ,CACJ,eAAe,kCAEnBC,KAAMC,KAAKC,UAAU,CACjB4M,QAASD,MAGZ1M,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFgI,QAAQC,IAAIjI,GACZ,EAAKf,SAAS,CAAC6I,WAAU,IACrB9H,EAAKgC,QACL,EAAK/C,SAAS,CAAC4I,MAAM,CAACK,QAAQlI,EAAK6H,MAAMK,QAASlI,KAAKA,EAAK6H,MAAM7H,QAElEE,MAAMF,EAAKkC,Y,oCAKZ,IAAD,OACVlD,KAAKC,SAAS,CACVsN,YAAW,EACXC,OAAM,IAEV/M,MAAM,aAAc,CAChBC,OAAQ,OACRC,QAAQ,CACJ,eAAe,oCAGlBI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFgI,QAAQC,IAAIjI,GACRA,EAAKgC,QACL,EAAK/C,SAAS,CAACqN,MAAM,CAACpE,QAAQlI,EAAK6H,MAAMK,QAASlI,KAAKA,EAAK6H,MAAM7H,QAElEE,MAAMF,EAAKkC,OAEf,EAAKjD,SAAS,CAACsN,YAAW,S,0CAKlCvN,KAAK4H,gB,gCAGC+F,EAAM3M,GAAO,IAAD,OAClBhB,KAAKC,SAAS,CAAC6I,WAAU,IACzBrI,MAAM,WAAY,CACdC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAU,CAChB6M,OACA3M,WAGHD,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFgI,QAAQC,IAAIjI,GACZ,EAAKf,SAAS,CAAC6I,WAAU,IACzB,EAAKlB,mB,gCAIP+F,EAAM3M,GAAO,IAAD,OAClBhB,KAAKC,SAAS,CAACsN,YAAW,IAC1B9M,MAAM,cAAe,CACjBC,OAAO,OACPC,QAAQ,CACJ,eAAe,kCAEnBC,KAAKC,KAAKC,UAAU,CAChB6M,OACA3M,WAGHD,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFgI,QAAQC,IAAIjI,GACZ,EAAKf,SAAS,CAACsN,YAAW,IAC1B,EAAKxB,mB,+BAMb,OACI,oCACI,kBAAC,GAAD,CACIf,UAAWhL,KAAKgL,UAChBlC,UAAW9I,KAAKf,MAAM6J,UACtB9H,KAAMhB,KAAKf,MAAM4J,MAAM7H,KACvB4G,YAAa5H,KAAK4H,YAClBqC,MAAOjK,KAAKnB,MAAMoL,QAEtB,kBAACqB,GAAD,CACI1D,YAAa5H,KAAK4H,YAClB3E,WAAYjD,KAAKnB,MAAMoE,WACvB8I,YAAa/L,KAAK+L,YAClBE,KAAMjM,KAAKnB,MAAMoN,KACjBhC,MAAOjK,KAAKnB,MAAMoL,QAErBjK,KAAKf,MAAMuO,OACZ,kBAAC,GAAD,CACIJ,UAAWpN,KAAKoN,UAChBrB,YAAa/L,KAAK+L,YAClB/K,KAAMhB,KAAKf,MAAMqO,MAAMtM,KACvB8H,UAAW9I,KAAKf,MAAMsO,kB,GAlIM3K,a,UCA3BgL,G,kDACjB,WAAY/O,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT4O,MAAK,EACLC,QAAO,EACP7D,OAAM,EACNgC,KAAK,CACD1M,KAAK,GACLC,QAAQ,GACRJ,MAAM,KAGd,EAAK6D,WAAa,EAAKA,WAAWlE,KAAhB,gBAZH,E,yDAeL,IAAD,OACT0B,MAAM,QAAS,CACXC,OAAO,MACPC,QAAQ,CACJ,eAAe,oCAGlBI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFgI,QAAQC,IAAIjI,GACZ,EAAKf,SAAS,CACV4N,KAAK7M,EAAK6M,KACV5D,MAAMjJ,EAAKiJ,MACX6D,QAAO,EACP7B,KAAK,CACD1M,KAAKyB,EAAKzB,KACVC,QAAQwB,EAAKxB,QACbJ,MAAM4B,EAAK5B,c,0CAO3BY,KAAKiD,e,+BAIL,OACI,oCACKjD,KAAKf,MAAM6O,OACR,oCAEQ9N,KAAKf,MAAM4O,KACP,kBAACrM,EAAA,EAAD,CAAWlB,UAAU,kBACjB,kBAAC,GAAD,CAAoB2J,MAAOjK,KAAKf,MAAMgL,MAAOhH,WAAYjD,KAAKiD,WAC1CgJ,KAAMjM,KAAKf,MAAMgN,QAGzC,kBAAC,EAAD,CAAQhJ,WAAYjD,KAAKiD,cAIrC,yBAAK3C,UAAW,eACZ,kBAACyN,GAAA,EAAD,Y,GA5DmBnL,aCqB5BoL,GApBH,WAAO,IAAD,EACE/G,mBAAS,CACrBgH,QAAQ,CACJC,QAAQ,CACJC,KAAK,WAETC,UAAU,CACND,KAAK,cANVE,EADO,oBAYRC,EAAWC,YAAeF,GAChC,OACI,kBAACG,EAAA,EAAD,CAAeH,MAAOC,GAClB,kBAAC,GAAD,QCVQG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1E,OACP,kBAAC,IAAM2E,WAAP,KACE,kBAAC,GAAD,OAEFpC,SAASC,eAAe,SDyHpB,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrBnO,MAAK,SAAAoO,GACJA,EAAaC,gBAEdC,OAAM,SAAAnM,GACL8F,QAAQ9F,MAAMA,EAAM/B,a","file":"static/js/main.505a7fa6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 335;","import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Form, Container, Col} from \"react-bootstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class SignUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleOnChange = this.handleOnChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.state = {\r\n            values:{\r\n                login:'',\r\n                email:'',\r\n                password1:'',\r\n                password2:'',\r\n                name:'',\r\n                surname:'',\r\n            },\r\n            errors:{\r\n                login:false,\r\n                email:false,\r\n                password1:true,\r\n                password2:true,\r\n                name:false,\r\n                surname:false,\r\n            },\r\n            rules:{\r\n                email:[v => v.search(/^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/g) !== -1 || \"Формат почты не верный\"],\r\n                login:[\r\n                    v => !!v || \"Введите логин.\",\r\n                    v => v.length > 5 || \"Логин должен быть длиннее 5 символов.\",\r\n                    v => v.search(/^[a-zA-Z0-9_-]*$/) !== -1 || \"Логин может содержать только символы _ - 0-9 a-z A-Z.\",\r\n                    v => v.search(/^[a-zA-Z]/) !== -1 || \"Логин может начинаться только на символы a-z A-Z.\",\r\n                ],\r\n                password1:[\r\n                    v => !!v || \"Введите пароль.\",\r\n                    v => v.length > 5 || \"Пароль должен быть длиннее 5 символов.\",\r\n                    v => v.search(/(?=.*[0-9])/g) !== -1 || \"Пароль должен содержать хотя бы одну цифру.\",\r\n                    v => v.search(/(?=.*[a-z])/g) !== -1 || \"Пароль должен содержать хотя бы одну латинскую букву в нижнем регистре.\",\r\n                    v => v.search(/[!@#$%^&*0-9a-zA-Z]/g) !== -1 || \"Пароль может содержать только !@#$%^&*0-9a-zA-Z.\"],\r\n                password2:[\r\n                    v => !!v || \"Введите пароль.\",\r\n                    v => v === this.password1Input.value || \"Пароли не совпадают.\"],\r\n                name:[\r\n                    v => !!v || \"Введите имя.\",\r\n                    v => v.search(/^[а-яА-Яa-zA-Z]+$/) !== -1 || \"Имя может содержать только символы - а-я А-Я a-z A-Z\"],\r\n                surname:[\r\n                    v => v.search(/^[а-яА-Яa-zA-Z]+$/) !== -1 || \"Фамилия может содержать только символы - а-я А-Я a-z A-Z\",\r\n                    v => !!v || \"Введите фамилию.\"],\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n    handleVerify(name, value) {\r\n        this.setState(prevState => {\r\n            const errors = prevState.rules[name].map(e => {\r\n                let err = e(value)\r\n                return err !== true ? err : null\r\n            })\r\n                .filter(function (e) {\r\n                    return e !== null\r\n                })\r\n                .map(e => <p className=\"p-0 m-0\">{e}</p>)\r\n            prevState.errors[name] = errors.length === 0 ? false : errors\r\n            return prevState\r\n        })\r\n    }\r\n\r\n    handleSubmit() {\r\n        if (Object.values(this.state.errors).every(e => !e)) {\r\n            fetch('/sign/up', {\r\n                method:'POST',\r\n                headers:{\r\n                    'Content-Type':'application/json;charset=utf-8'\r\n                },\r\n                body:JSON.stringify({\r\n                    ...this.state.values,\r\n                })\r\n            })\r\n                .then(data => data.json())\r\n                .then(data => {\r\n                    alert(data.message)\r\n                    this.props.handleReg()\r\n                })\r\n        } else {\r\n            alert(\"Ошибка в введенных данных\")\r\n        }\r\n    }\r\n\r\n    handleOnChange(event) {\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n        this.setState(prevState => {\r\n            prevState.values[name] = value\r\n            return prevState\r\n        })\r\n        this.handleVerify(name, value)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"col-12 col-lg-9 p-3 \">\r\n                <Container className=\"custom-card bg-light p-3\">\r\n                    <p className=\"h5 mb-3 text-center\">\r\n                        Регистрация\r\n                    </p>\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridName\" className=\"col-12 col-lg-6\">\r\n                                    <Form.Label>Имя</Form.Label>\r\n                                    <Form.Control\r\n                                        isInvalid={!!this.state.errors.name}\r\n                                        name={\"name\"}\r\n                                        value={this.state.values.name}\r\n                                        onChange={this.handleOnChange}\r\n                                        type=\"text\"\r\n                                        placeholder=\"Введите полное имя\"\r\n                                        className=\"custom-textform\"\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {this.state.errors.name}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col} controlId=\"formGridSurname\" className=\"col-12 col-lg-6\">\r\n                                    <Form.Label>Фамилия</Form.Label>\r\n                                    <Form.Control\r\n                                        isInvalid={!!this.state.errors.surname}\r\n                                        name={\"surname\"}\r\n                                        value={this.state.values.surname}\r\n                                        onChange={this.handleOnChange}\r\n                                        type=\"text\"\r\n                                        placeholder=\"Введите фамилию\"\r\n                                        className=\"custom-textform\"\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {this.state.errors.surname}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridLogin\" className=\"col-12 col-lg-6\">\r\n                                    <Form.Label>Логин</Form.Label>\r\n                                    <Form.Control\r\n                                        isInvalid={!!this.state.errors.login}\r\n                                        name={\"login\"}\r\n                                        value={this.state.values.login}\r\n                                        onChange={this.handleOnChange}\r\n                                        type=\"text\"\r\n                                        placeholder=\"Введите логин\"\r\n                                        className=\"custom-textform\"\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {this.state.errors.login}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col} controlId=\"formGridEmail\" className=\"col-12 col-lg-6\">\r\n                                    <Form.Label>Почта</Form.Label>\r\n                                    <Form.Control\r\n                                        isInvalid={!!this.state.errors.email}\r\n                                        name={\"email\"}\r\n                                        value={this.state.values.email}\r\n                                        onChange={this.handleOnChange}\r\n                                        type=\"email\"\r\n                                        placeholder=\"Введите почту\"\r\n                                        className=\"custom-textform\"\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {this.state.errors.email}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridPassword1\" className=\"col-12 col-lg-6\">\r\n                                    <Form.Label>Пароль</Form.Label>\r\n                                    <Form.Control\r\n                                        isInvalid={!!this.state.errors.password1}\r\n                                        name={\"password1\"}\r\n                                        value={this.state.values.password1}\r\n                                        onChange={this.handleOnChange}\r\n                                        type=\"password\"\r\n                                        placeholder=\"Введите пароль\"\r\n                                        className=\"custom-textform\"\r\n                                        ref={(input) => this.password1Input = input}\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {this.state.errors.password1}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col} controlId=\"formGridPassword2\" className=\"col-12 col-lg-6\">\r\n                                    <Form.Label>Повторить пароль</Form.Label>\r\n                                    <Form.Control\r\n                                        isInvalid={!!this.state.errors.password2}\r\n                                        name={\"password2\"}\r\n                                        value={this.state.values.password2}\r\n                                        onChange={this.handleOnChange}\r\n                                        type=\"password\"\r\n                                        placeholder=\"Повторите пароль\"\r\n                                        className=\"custom-textform\"\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {this.state.errors.password2}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.handleSubmit}\r\n                                className=\"custom-btn mr-3 mb-2\"\r\n                            >\r\n                                Зарегистрироваться\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Form, Container, Col, Image} from \"react-bootstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport SignUp from \"./SignUp\";\r\n\r\nexport default class SignIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleVerify = this.handleVerify.bind(this)\r\n        this.handleOnChange = this.handleOnChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleReg = this.handleReg.bind(this)\r\n        this.state = {\r\n            reg:false,\r\n            values:{\r\n                login:'',\r\n                password:'',\r\n            },\r\n            errors:{\r\n                login:false,\r\n                password:false,\r\n\r\n            },\r\n            rules:{\r\n                login:[\r\n                    v => !!v || \"Введите логин.\",\r\n                ],\r\n                password:[\r\n                    v => !!v || \"Введите пароль.\",\r\n                ],\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    handleOnChange(event) {\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n        this.setState(prevState => {\r\n            prevState.values[name] = value\r\n            return prevState\r\n        })\r\n        this.handleVerify(name, value)\r\n    }\r\n\r\n    handleSubmit() {\r\n        fetch('/sign/in', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify(this.state.values)\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    this.props.updateAuth()\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n    handleVerify(name, value) {\r\n        this.setState(prevState => {\r\n            const errors = prevState.rules[name].map(e => {\r\n                let err = e(value)\r\n                return err !== true ? err : null\r\n            })\r\n                .filter(function (e) {\r\n                    return e !== null\r\n                })\r\n                .map(e => <p className=\"p-0 m-0\">{e}</p>)\r\n            prevState.errors[name] = errors.length === 0 ? false : errors\r\n            return prevState\r\n        })\r\n    }\r\n\r\n    handleReg() {\r\n        this.setState({\r\n            reg: this.state.reg === false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Container className=\"col-12\">\r\n                    <Container className=\"col-12 col-lg-6 p-3\">\r\n                        <Container className=\"custom-card bg-light p-3\">\r\n                            <p className=\"h5 mb-3 text-center\">\r\n                                <Image src=\"static/logo.png\" width=\"80\"/>\r\n                                | Авторизация\r\n                            </p>\r\n                            <Col>\r\n                                <Form>\r\n                                    <Form.Group controlId=\"formBasicLogin\">\r\n                                        <Form.Label>Логин</Form.Label>\r\n                                        <Form.Control\r\n                                            isInvalid={!!this.state.errors.login}\r\n                                            name={\"login\"}\r\n                                            value={this.state.values.login}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            placeholder=\"Введите логин\"\r\n                                            className=\"custom-textform\"\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {this.state.errors.login}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"formBasicPassword\">\r\n                                        <Form.Label>Пароль</Form.Label>\r\n                                        <Form.Control\r\n                                            isInvalid={!!this.state.errors.password}\r\n                                            name={\"password\"}\r\n                                            value={this.state.values.password}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            placeholder=\"Введите пароль\"\r\n                                            className=\"custom-textform\"\r\n                                            ref={(input) => this.passwordInput = input}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {this.state.errors.password}\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Button color=\"primary\" variant=\"contained\" className=\"mr-3 mb-2\"\r\n                                            onClick={this.handleSubmit}>\r\n                                        Войти\r\n                                    </Button>\r\n                                    <Button variant=\"contained\" className=\"mr-3 mb-2\" onClick={this.handleReg}>\r\n                                        Регистрация\r\n                                    </Button>\r\n                                </Form>\r\n                            </Col>\r\n                        </Container>\r\n                    </Container>\r\n                </Container>\r\n                {this.state.reg &&\r\n                <Container className=\"col-12\">\r\n                    <SignUp handleReg={this.handleReg}/>\r\n                </Container>}\r\n\r\n            </>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {forwardRef} from 'react';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nexport const tableIcons = {\r\n    Add:forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\r\n    Check:forwardRef((props, ref) => <Check {...props} ref={ref}/>),\r\n    Clear:forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Delete:forwardRef((props, ref) => <DeleteOutline {...props} ref={ref}/>),\r\n    DetailPanel:forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    Edit:forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\r\n    Export:forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\r\n    Filter:forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\r\n    FirstPage:forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\r\n    LastPage:forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\r\n    NextPage:forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    PreviousPage:forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\r\n    ResetSearch:forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Search:forwardRef((props, ref) => <Search {...props} ref={ref}/>),\r\n    SortArrow:forwardRef((props, ref) => <ArrowDownward {...props} ref={ref}/>),\r\n    ThirdStateCheck:forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\r\n    ViewColumn:forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\r\n};\r\n\r\n\r\nexport const localization = {\r\n    body:{\r\n        emptyDataSourceMessage:'Нет данных',\r\n        addTooltip:'Добавить',\r\n        deleteTooltip:'Удалить',\r\n        editTooltip:'Изменить',\r\n        filterRow:{\r\n            filterTooltip:'Фильтр'\r\n        },\r\n        editRow:{\r\n            deleteText:'Вы действительно хотите удалить запись?',\r\n            cancelTooltip:'Отменить',\r\n            saveTooltip:'Подтвердить'\r\n        }\r\n    },\r\n    grouping:{\r\n        placeholder:'Перемещение колонок ...',\r\n        groupedBy:'Сгруппирован по:'\r\n    },\r\n    header:{\r\n        actions:'Действия'\r\n    },\r\n    pagination:{\r\n        labelDisplayedRows:'{from}-{to} из {count}',\r\n        labelRowsSelect:'Строк',\r\n        labelRowsPerPage:'Строк на странице:',\r\n        firstAriaLabel:'Первая страница',\r\n        firstTooltip:'Первая страница',\r\n        previousAriaLabel:'Предыдущая страница',\r\n        previousTooltip:'Предыдущая страница',\r\n        nextAriaLabel:'Следующая страница',\r\n        nextTooltip:'Следующая страница',\r\n        lastAriaLabel:'Последняя страница',\r\n        lastTooltip:'Последняя страница'\r\n    },\r\n    toolbar:{\r\n        addRemoveColumns:'Добавить/удалить столбец',\r\n        nRowsSelected:'{0} Строк выбрано',\r\n        showColumnsTitle:'Показать колонки',\r\n        showColumnsAriaLabel:'Показать колонки',\r\n        exportTitle:'Экспортировать',\r\n        exportAriaLabel:'Экспортировать',\r\n        exportName:'Экспортировать как CSV',\r\n        searchTooltip:'Поиск',\r\n        searchPlaceholder:'Поиск'\r\n    }\r\n}","import React from \"react\";\r\nimport '../App.css';\r\nimport {Container, Row, Col} from \"react-bootstrap\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nexport default function TableOptions(props) {\r\n    const [state, setState] = React.useState({\r\n        status:props.rowData.status,\r\n        value:0,\r\n        comment:\"\",\r\n        comment_status:\"\",\r\n        note:\"\",\r\n        checkedReturn:false\r\n    });\r\n\r\n    const handleCheck = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setState({\r\n            ...state,\r\n            [name]:event.target.value,\r\n        });\r\n    };\r\n\r\n    const cardAction = (event, id) => {\r\n        fetch('/card_action', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify({\r\n                event:event,\r\n                amount:state.value,\r\n                comment:state.comment,\r\n                return:state.checkedReturn,\r\n                id:id\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    props.updateTable()\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n    const updateStatus = (id) => {\r\n        fetch('/update_status', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify({\r\n                status:state.status,\r\n                comment:state.comment_status,\r\n                id:id\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    props.updateTable()\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n    const updateNote = (id) => {\r\n        fetch('/update_note', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify({\r\n                note:state.note,\r\n                id:id\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    props.updateTable()\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Container className=\"col-12 bg-light\">\r\n            <Container className=\"animate col-12\">\r\n                <Row>\r\n                    <Col className=\"col-auto pt-3 pb-3 pl-1 pr-2\">\r\n                        <Container className=\"bg-white custom-card p-3\">\r\n                            <Row>\r\n                                <div className=\"header ml-3\">Изменение баланса:</div>\r\n                            </Row>\r\n                            <Row className=\"p-2\">\r\n                                <Col className=\"col-auto mr-3\">\r\n                                    <Row className=\"mb-1 pl-3\">\r\n                                        <TextField\r\n                                            id=\"standard-number\"\r\n                                            label=\"Сумма\"\r\n                                            type=\"number\"\r\n                                            name=\"value\"\r\n                                            value={state.value}\r\n                                            onChange={handleChange}\r\n                                            InputLabelProps={{\r\n                                                shrink:true,\r\n                                            }}\r\n                                            variant=\"outlined\"\r\n                                            size=\"small\"\r\n                                        />\r\n                                    </Row>\r\n                                    <Row className=\"pl-3\">\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={state.checkedReturn}\r\n                                                    onChange={handleCheck}\r\n                                                    name=\"checkedReturn\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Возврат (для зачисления)\"\r\n                                        />\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col className=\"col-auto\">\r\n                                    <Row className=\"mb-2\">\r\n                                        <Button variant=\"contained\" color=\"secondary\" name=\"drop\"\r\n                                                className=\"col-12\"\r\n                                                onClick={() => cardAction(\"drop\", props.rowData.id)}>\r\n                                            Снять с карты\r\n                                        </Button>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                                className=\"col-12\"\r\n                                                onClick={() => cardAction(\"add\", props.rowData.id)}>\r\n                                            Зачислить\r\n                                        </Button>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"p-2\">\r\n                                <Col className=\"col-12 d-flex align-items-center\">\r\n                                    <TextField\r\n                                        className=\"col-12\"\r\n                                        id=\"comment\"\r\n                                        label=\"Комментарий\"\r\n                                        variant=\"outlined\"\r\n                                        name=\"comment\"\r\n                                        value={state.comment}\r\n                                        onChange={handleChange}\r\n                                        size=\"small\"\r\n                                        multiline={true}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Col>\r\n                    <Col className=\"col-auto pt-3 pb-3 pl-1 pr-2\">\r\n                        <Container className=\"bg-white custom-card p-3\">\r\n                            <Row>\r\n                                <div className=\"header ml-3\">Изменение состояния:</div>\r\n                            </Row>\r\n                            <Row className=\"p-2\">\r\n                                <Col className=\"col-6\">\r\n                                    <FormControl variant=\"outlined\" size=\"small\" className=\"col-12 mt-3\">\r\n                                        <InputLabel id=\"status-label\">Статус</InputLabel>\r\n                                        <Select\r\n                                            className=\"mb-3\"\r\n                                            value={state.status}\r\n                                            onChange={handleChange}\r\n                                            labelId=\"status\"\r\n                                            name=\"status\"\r\n                                            id=\"status\"\r\n                                            label=\"Статус\"\r\n                                        >\r\n                                            <MenuItem value={\"В баре\"}>В баре</MenuItem>\r\n                                            <MenuItem value={\"Вышел\"}>Вышел</MenuItem>\r\n                                            <MenuItem value={\"Забрал сертификаты\"}>Забрал сертификаты</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    <TextField\r\n                                        className=\"col-12\"\r\n                                        id=\"comment_status\"\r\n                                        name=\"comment_status\"\r\n                                        value={state.comment_status}\r\n                                        onChange={handleChange}\r\n                                        label=\"Комментарий\"\r\n                                        variant=\"outlined\"\r\n                                        size=\"small\"\r\n                                        multiline={true}\r\n                                    />\r\n\r\n                                </Col>\r\n                                <Col className=\"d-flex align-items-center\">\r\n                                    <Button variant=\"contained\"\r\n                                            onClick={() => updateStatus(props.rowData.id)}>\r\n                                        Сохранить\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Col>\r\n                    <Col className=\"col-3 pt-3 pb-3 pl-1 pr-2\">\r\n                        <Container className=\"bg-white custom-card p-3\">\r\n                            <Row>\r\n                                <div className=\"header ml-3\">Дополнительно:</div>\r\n                            </Row>\r\n                            <Row className=\"p-2 pl-3 pr-3\">\r\n                                <TextField\r\n                                    className=\"col-12 mt-2\"\r\n                                    id=\"comment_status\"\r\n                                    name=\"note\"\r\n                                    value={state.note}\r\n                                    onChange={handleChange}\r\n                                    label=\"Примечание\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    multiline={true}\r\n                                />\r\n                            </Row>\r\n                            <Row className=\"p-2 pl-3 pr-3 d-flex justify-content-end\">\r\n                                <Button variant=\"contained\"\r\n                                        onClick={() => updateNote(props.rowData.id)}>\r\n                                    Сохранить\r\n                                </Button>\r\n                            </Row>\r\n                        </Container>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Container>\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport '../App.css';\r\nimport MaterialTable from \"material-table\";\r\nimport {localization, tableIcons} from \"./TableAddons\"\r\nimport {Container} from \"react-bootstrap\";\r\n\r\nexport default class UserTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            table:{},\r\n            isLoading:true\r\n        }\r\n        this.updateHistory = this.updateHistory.bind(this)\r\n    }\r\n\r\n    updateHistory() {\r\n        this.setState({isLoading:true})\r\n        fetch(`/db/history`, {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify({\r\n                id:this.props.id\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({isLoading:false})\r\n                if (data.success) {\r\n                    this.setState({table:{columns:data.table.columns, data:data.table.data}})\r\n                } else {\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateHistory()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"col-12 p-3\">\r\n                <MaterialTable\r\n                    style={{\r\n                        boxShadow:\"0px 0px 0px\",\r\n                        animation:'appear .3s'\r\n                    }}\r\n                    isLoading={this.props.isLoading}\r\n                    icons={tableIcons}\r\n                    localization={localization}\r\n                    title={\r\n                        <div className=\"header mr-3 p-2 pl-3 pr-3\">\r\n                            История операций:\r\n                        </div>\r\n                    }\r\n                    columns={[\r\n                        {title:'Дата', field:'datetime'},\r\n                        {title:'Описание', field:'description'},\r\n                        {title:'Значение', field:'value'},\r\n                        {title:'Комментарий', field:'comment'},\r\n                        {title:'Пользователь', field:'user'},\r\n                        {title:'Логин', field:'login'}\r\n                    ]}\r\n                    data={this.state.table.data}\r\n                    options={{\r\n                        pageSize:5,\r\n                        pageSizeOptions:[5, 10, 30, 50],\r\n                        searchFieldAlignment:\"left\",\r\n                        actionsColumnIndex:-1,\r\n                        exportButton:true\r\n                    }}\r\n                />\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport '../App.css';\r\nimport {Switch} from \"@material-ui/core\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nexport default function BarSwitch() {\r\n    return (\r\n        <FormControlLabel\r\n            control={\r\n                <Switch\r\n                    name=\"noBar\"\r\n                    id=\"noBar\"\r\n                    color=\"primary\"\r\n                />\r\n            }\r\n            label=\"Только в баре\"\r\n        />\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport '../App.css';\r\nimport MaterialTable from \"material-table\";\r\nimport {localization, tableIcons} from \"./TableAddons\"\r\nimport TableOptions from \"./TableOptions\";\r\nimport TableHistory from \"./TableHistory\";\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport {Image} from \"react-bootstrap\";\r\nimport BarSwitch from \"./BarSwitch\";\r\n\r\nexport default class UserTable extends Component {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.props.admin ?\r\n                        <MaterialTable\r\n                            style={{\r\n                                borderRadius:20,\r\n                                boxShadow:\"0px 3px 5px rgb(224, 224, 224)\",\r\n                                animation:'appear .6s'\r\n                            }}\r\n                            isLoading={this.props.isLoading}\r\n                            icons={tableIcons}\r\n                            localization={localization}\r\n                            title={\r\n                                <div className=\"mr-3 p-2 pl-3 pr-3\">\r\n                                    <Image src=\"static/logo.png\" height=\"45\"/>\r\n                                </div>\r\n                            }\r\n                            columns={[\r\n                                {title:'Имя', field:'name'},\r\n                                {title:'Фамилия', field:'surname'},\r\n                                {title:'Контакты', field:'phone_number'},\r\n                                {title:'Номер карты', field:'card_number'},\r\n                                {\r\n                                    title:'Баланс', field:'balance', type:'numeric', render:rowData =>\r\n                                        (<div style={{fontWeight:\"bold\"}}>  {rowData['balance']}  </div>)\r\n                                },\r\n                                {\r\n                                    title:'Статус', field:'status', initialEditValue:'В баре', render:rowData =>\r\n                                        (<div style={{minWidth:\"150px\"}}>  {rowData['status']}  </div>)\r\n                                },\r\n                                {\r\n                                    title:'Примечание', field:'note', render:rowData =>\r\n                                        (<div style={{minWidth:\"280px\"}}>  {rowData['note']}  </div>)\r\n                                }\r\n                            ]}\r\n                            data={this.props.data}\r\n                            detailPanel={[\r\n                                {\r\n                                    tooltip:'Опции',\r\n                                    render:rowData => {\r\n                                        return (\r\n                                            <TableOptions\r\n                                                rowData={rowData}\r\n                                                updateTable={this.props.updateTable}\r\n                                            />\r\n                                        )\r\n                                    },\r\n                                },\r\n                                {\r\n                                    icon:HistoryIcon,\r\n                                    tooltip:'История',\r\n                                    render:rowData => {\r\n                                        return (\r\n                                            <TableHistory\r\n                                                id={rowData.id}\r\n                                            />\r\n                                        )\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            editable={{\r\n                                onRowAdd:(newData) =>\r\n                                    new Promise((resolve) => {\r\n                                        resolve();\r\n                                        this.props.editTable(\"ADD_RECORD\", newData)\r\n                                    }),\r\n                                onRowUpdate:(newData, prevData) =>\r\n                                    new Promise((resolve) => {\r\n                                        resolve();\r\n                                        this.props.editTable(\"EDIT_RECORD\", newData)\r\n                                    }),\r\n                                onRowDelete:(newData) =>\r\n                                    new Promise((resolve) => {\r\n                                        resolve();\r\n                                        this.props.editTable(\"DELETE_RECORD\", newData)\r\n                                    }),\r\n                            }}\r\n                            options={{\r\n                                pageSize:10,\r\n                                pageSizeOptions:[10, 20, 30, 50, 100],\r\n                                searchFieldAlignment:\"left\",\r\n                                actionsColumnIndex:-1,\r\n                                exportButton:true,\r\n                                searchFieldVariant:\"outlined\",\r\n                            }}\r\n                            actions={[\r\n                                {\r\n                                    icon:BarSwitch,\r\n                                    tooltip:'Только в баре',\r\n                                    isFreeAction:true,\r\n                                    onClick:this.props.updateTable\r\n                                }\r\n                            ]}\r\n                        />\r\n                        :\r\n                        <MaterialTable\r\n                            style={{\r\n                                borderRadius:20,\r\n                                boxShadow:\"0px 3px 5px rgb(224, 224, 224)\",\r\n                                animation:'appear .6s'\r\n                            }}\r\n                            isLoading={this.props.isLoading}\r\n                            icons={tableIcons}\r\n                            localization={localization}\r\n                            title={\r\n                                <div className=\"mr-3 p-2 pl-3 pr-3\">\r\n                                    <Image src=\"static/logo.png\" height=\"45\"/>\r\n                                </div>\r\n                            }\r\n                            columns={[\r\n                                {title:'Имя', field:'name'},\r\n                                {title:'Фамилия', field:'surname'},\r\n                                {title:'Контакты', field:'phone_number'},\r\n                                {title:'Номер карты', field:'card_number'},\r\n                                {\r\n                                    title:'Баланс', field:'balance', type:'numeric', render:rowData =>\r\n                                        (<div style={{fontWeight:\"bold\"}}>  {rowData['balance']}  </div>)\r\n                                },\r\n                                {\r\n                                    title:'Статус', field:'status', initialEditValue:'В баре', render:rowData =>\r\n                                        (<div style={{minWidth:\"150px\"}}>  {rowData['status']}  </div>)\r\n                                },\r\n                                {\r\n                                    title:'Примечание', field:'note', render:rowData =>\r\n                                        (<div style={{minWidth:\"280px\"}}>  {rowData['note']}  </div>)\r\n                                }\r\n                            ]}\r\n                            data={this.props.data}\r\n                            detailPanel={[\r\n                                {\r\n                                    tooltip:'Опции',\r\n                                    render:rowData => {\r\n                                        return (\r\n                                            <TableOptions\r\n                                                rowData={rowData}\r\n                                                updateTable={this.props.updateTable}\r\n                                            />\r\n                                        )\r\n                                    },\r\n                                },\r\n                                {\r\n                                    icon:HistoryIcon,\r\n                                    tooltip:'История',\r\n                                    render:rowData => {\r\n                                        return (\r\n                                            <TableHistory\r\n                                                id={rowData.id}\r\n                                            />\r\n                                        )\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            editable={{\r\n                                onRowAdd:(newData) =>\r\n                                    new Promise((resolve) => {\r\n                                        resolve();\r\n                                        this.props.editTable(\"ADD_RECORD\", newData)\r\n                                    }),\r\n                            }}\r\n                            options={{\r\n                                pageSize:10,\r\n                                pageSizeOptions:[10, 20, 30, 50, 100],\r\n                                searchFieldAlignment:\"left\",\r\n                                actionsColumnIndex:-1,\r\n                                exportButton:true,\r\n                                searchFieldVariant:\"outlined\",\r\n                            }}\r\n                            actions={[\r\n                                {\r\n                                    icon:BarSwitch,\r\n                                    tooltip:'Только в баре',\r\n                                    isFreeAction:true,\r\n                                    onClick:this.props.updateTable\r\n                                }\r\n                            ]}\r\n                        />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport '../App.css';\r\nimport {Container, Col, Row} from \"react-bootstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {saveAs} from \"file-saver\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nexport default function OptionContainer(props) {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [state, setState] = React.useState({\r\n        save:true\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        setState({...state, [event.target.name]:event.target.checked});\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleDownload = () => {\r\n        fetch(`/db/download`, {\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n        })\r\n            .then(data => data.json())\r\n            .then(json => {\r\n                let blob = new Blob([JSON.stringify(json, null, 2)], {type:\"text/json\"})\r\n                saveAs(blob, \"alcasino_db.json\")\r\n            })\r\n    }\r\n\r\n    const handleImport = () => {\r\n        const input = document.getElementById('fileinput')\r\n        const formData = new FormData();\r\n        formData.append(\"file\", input.files[0]);\r\n        formData.append(\"save\", state.save)\r\n        fetch(`/db/import`, {\r\n            method:\"POST\",\r\n            body:formData\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    props.updateTable()\r\n                    handleClose()\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleSignOut = () => {\r\n        fetch(`/sign/out`, {\r\n            method:\"POST\",\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    props.updateAuth()\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className=\"custom-card col-12 mt-3 p-3\">\r\n            <Row>\r\n                <Col className=\"col-auto d-flex align-items-center\">\r\n                    <Button variant=\"outlined\" onClick={handleDownload}>Бэкап данных</Button>\r\n                </Col>\r\n                <Col className=\"col-auto d-flex align-items-center\">\r\n                    <Button variant=\"outlined\" onClick={handleClickOpen}>Импортировать</Button>\r\n                </Col>\r\n                <Col className=\"col-auto d-flex align-items-center\">\r\n                    <a href=\"static/instruction.pdf\" target=\"_blank\">\r\n                        <Button variant=\"outlined\">Помощь</Button>\r\n                    </a>\r\n                </Col>\r\n                <Col className=\"col-auto d-flex align-items-center\">\r\n                    <Button variant=\"outlined\" color=\"secondary\" onClick={handleSignOut}>Выйти</Button>\r\n                </Col>\r\n                {props.admin &&\r\n                    <Col className=\"col-auto d-flex align-items-center\">\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={props.updateUsers}>Администрирование</Button>\r\n                    </Col>\r\n                }\r\n\r\n                <Col className=\"d-flex justify-content-end align-items-center\">\r\n                    <Tooltip title={<big> {props.user.email} </big>} placement=\"top\">\r\n                        <div>\r\n                            Авторизован: &nbsp; <b>{props.user.name} {props.user.surname}</b>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Col>\r\n\r\n\r\n            </Row>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Импорт данных</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Для импортирования используйте файл <b> бэкапа данных </b> приложения (alcasino_db.json).\r\n                        Текущие данные можно оставить или удалить по выбору.\r\n                    </DialogContentText>\r\n                    <input type=\"file\" id=\"fileinput\" className=\"mb-2\" accept=\".json\"/>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={state.save}\r\n                                onChange={handleChange}\r\n                                name=\"save\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Сохранить текущие данные\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Отмена\r\n                    </Button>\r\n                    <Button onClick={handleImport} color=\"primary\">\r\n                        Импорт\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Container>\r\n    )\r\n}","import React from \"react\";\r\nimport '../App.css';\r\nimport {Container, Row, Col} from \"react-bootstrap\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nexport default function AdminOptions(props) {\r\n    const [state, setState] = React.useState({\r\n        status:props.rowData.admin,\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setState({\r\n            ...state,\r\n            [name]:event.target.value,\r\n        });\r\n    };\r\n\r\n    const updateStatus = (id) => {\r\n        fetch('/update_admin', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify({\r\n                status:state.status,\r\n                id:id\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    props.updateUsers()\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Container className=\"col-12 bg-light\">\r\n            <Container className=\"animate col-12\">\r\n                <Row>\r\n                    <Col className=\"col-auto pt-3 pb-3 pl-1 pr-2\">\r\n                        <Container className=\"bg-white custom-card p-3\">\r\n                            <Row>\r\n                                <div className=\"header ml-3\">Права доступа</div>\r\n                            </Row>\r\n                            <Row className=\"p-2\">\r\n                                <Col className=\"col-auto d-flex align-items-center\">\r\n                                    <FormControl variant=\"outlined\" size=\"small\" className=\"col-12 mt-3\">\r\n                                        <InputLabel id=\"status-label\">Статус</InputLabel>\r\n                                        <Select\r\n                                            className=\"mb-3\"\r\n                                            value={state.status}\r\n                                            onChange={handleChange}\r\n                                            labelId=\"status\"\r\n                                            name=\"status\"\r\n                                            id=\"status\"\r\n                                            label=\"Статус\"\r\n                                        >\r\n                                            <MenuItem value={\"Да\"}>Да</MenuItem>\r\n                                            <MenuItem value={\"Нет\"}>Нет</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Col>\r\n                                <Col className=\"col-auto d-flex align-items-center\">\r\n                                    <Button variant=\"contained\"\r\n                                            onClick={() => updateStatus(props.rowData.id)}>\r\n                                        Сохранить\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Container>\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport '../App.css';\r\nimport MaterialTable from \"material-table\";\r\nimport {localization, tableIcons} from \"./TableAddons\"\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport TableOptions from \"./TableOptions\";\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\nimport TableHistory from \"./TableHistory\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport AdminOptions from \"./AdminOptions\";\r\n\r\nexport default class TableAdmin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <MaterialTable\r\n                    style={{\r\n                        borderRadius:20,\r\n                        boxShadow:\"0px 3px 5px rgb(224, 224, 224)\",\r\n                        animation:'appear .6s',\r\n                        marginTop:\"15px\"\r\n                    }}\r\n                    isLoading={this.props.isLoading}\r\n                    icons={tableIcons}\r\n                    localization={localization}\r\n                    title={\r\n                        <div className=\"header mr-3 p-2 pl-3 pr-3\">\r\n                            Пользователи приложения\r\n                        </div>\r\n                    }\r\n                    columns={[\r\n                        {title:'Имя', field:'name'},\r\n                        {title:'Фамилия', field:'surname'},\r\n                        {title:'Email', field:'email'},\r\n                        {title:'Логин', field:'login'},\r\n                        {title:'Администратор', field:'admin'}\r\n                    ]}\r\n                    editable={{\r\n                        onRowDelete:(newData) =>\r\n                            new Promise((resolve) => {\r\n                                resolve();\r\n                                this.props.editUsers(\"DELETE_RECORD\", newData)\r\n                            }),\r\n                    }}\r\n                    detailPanel={[\r\n                        {\r\n                            tooltip:'Опции',\r\n                            render:rowData => {\r\n                                return (\r\n                                    <AdminOptions\r\n                                        updateUsers={this.props.updateUsers}\r\n                                        rowData={rowData}\r\n                                    />\r\n                                )\r\n                            },\r\n                        },\r\n                    ]}\r\n                    data={this.props.data}\r\n                    options={{\r\n                        pageSize:10,\r\n                        pageSizeOptions:[10, 20, 30],\r\n                        searchFieldAlignment:\"left\",\r\n                        actionsColumnIndex:-1,\r\n                        exportButton:true\r\n                    }}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport '../App.css';\r\nimport UserTable from './Table'\r\nimport OptionContainer from \"./OptionContainer\";\r\nimport TableAdmin from \"./TableAdmin\";\r\n\r\nexport default class UserTableContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            table:{},\r\n            isLoading:true,\r\n            users:{},\r\n            uisLoading:true,\r\n            uShow: false,\r\n        }\r\n        this.editTable = this.editTable.bind(this)\r\n        this.editUsers = this.editUsers.bind(this)\r\n        this.updateTable = this.updateTable.bind(this)\r\n        this.updateUsers = this.updateUsers.bind(this)\r\n    }\r\n\r\n    updateTable() {\r\n        this.setState({isLoading:true})\r\n        const contentSwitch = document.getElementById(\"noBar\").checked\r\n        fetch(`/db/get`, {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                content: contentSwitch\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({isLoading:false})\r\n                if (data.success) {\r\n                    this.setState({table:{columns:data.table.columns, data:data.table.data}})\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n            })\r\n    }\r\n\r\n    updateUsers() {\r\n        this.setState({\r\n            uisLoading:true,\r\n            uShow:true\r\n        })\r\n        fetch(`/users/get`, {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                if (data.success) {\r\n                    this.setState({users:{columns:data.table.columns, data:data.table.data}})\r\n                } else {\r\n                    alert(data.error)\r\n                }\r\n                this.setState({uisLoading:false})\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateTable()\r\n    }\r\n\r\n    editTable(task, data) {\r\n        this.setState({isLoading:true})\r\n        fetch(`/db/edit`, {\r\n            method:\"POST\",\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify({\r\n                task,\r\n                data\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({isLoading:false})\r\n                this.updateTable()\r\n            })\r\n    }\r\n\r\n    editUsers(task, data) {\r\n        this.setState({uisLoading:true})\r\n        fetch(`/users/edit`, {\r\n            method:\"POST\",\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n            body:JSON.stringify({\r\n                task,\r\n                data\r\n            })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({uisLoading:false})\r\n                this.updateUsers()\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <UserTable\r\n                    editTable={this.editTable}\r\n                    isLoading={this.state.isLoading}\r\n                    data={this.state.table.data}\r\n                    updateTable={this.updateTable}\r\n                    admin={this.props.admin}\r\n                />\r\n                <OptionContainer\r\n                    updateTable={this.updateTable}\r\n                    updateAuth={this.props.updateAuth}\r\n                    updateUsers={this.updateUsers}\r\n                    user={this.props.user}\r\n                    admin={this.props.admin}\r\n                />\r\n                {this.state.uShow &&\r\n                <TableAdmin\r\n                    editUsers={this.editUsers}\r\n                    updateUsers={this.updateUsers}\r\n                    data={this.state.users.data}\r\n                    isLoading={this.state.uisLoading}\r\n                />}\r\n            </>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport SignIn from \"./components/SignIn\";\r\nimport {Container} from \"react-bootstrap\";\r\nimport UserTableContainer from \"./components/TableContainer\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nexport default class MainContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            auth:false,\r\n            loaded:false,\r\n            admin:false,\r\n            user:{\r\n                name:\"\",\r\n                surname:\"\",\r\n                email:\"\"\r\n            }\r\n        }\r\n        this.updateAuth = this.updateAuth.bind(this)\r\n    }\r\n\r\n    updateAuth() {\r\n        fetch('/auth', {\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type':'application/json;charset=utf-8'\r\n            },\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({\r\n                    auth:data.auth,\r\n                    admin:data.admin,\r\n                    loaded:true,\r\n                    user:{\r\n                        name:data.name,\r\n                        surname:data.surname,\r\n                        email:data.email\r\n                    }\r\n                })\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateAuth()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.loaded ?\r\n                    <>\r\n                        {\r\n                            this.state.auth ?\r\n                                <Container className=\"App col-12 p-3\">\r\n                                    <UserTableContainer admin={this.state.admin} updateAuth={this.updateAuth}\r\n                                                        user={this.state.user}/>\r\n                                </Container>\r\n                                :\r\n                                <SignIn updateAuth={this.updateAuth}/>\r\n                        }\r\n                    </>\r\n                    :\r\n                    <div className={\"col-12 pt-1\"}>\r\n                        <LinearProgress/>\r\n                    </div>\r\n\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}","import React, {Component, useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport MainContainer from \"./MainContainer\";\n\n\nconst App = () => {\n    const [theme] = useState({\n        palette:{\n            primary:{\n                main:\"#5173cb\"\n            },\n            secondary:{\n                main:\"#cb5f5f\"\n            }\n        }\n    });\n\n    const muiTheme = createMuiTheme(theme);\n    return (\n        <ThemeProvider theme={muiTheme}>\n            <MainContainer/>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}